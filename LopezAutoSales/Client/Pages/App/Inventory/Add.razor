@page "/app/inventory/add"
@attribute [Authorize(Roles = "Admin")]
@inject AuthHttp auth
@inject HttpClient http
@inject NavigationManager nav
@inject IJSRuntime js

<h1 class="text-center">Add Vehicle</h1>
<EditForm Model="Upload" OnValidSubmit="SubmitVehicle">
    <DataAnnotationsValidator />
    <ErrorDisplay @bind-Errors="Errors" />
    <div class="form-group">
        <label>VIN</label>
        <div class="input-group">
            <InputText class="form-control" @bind-Value="Upload.Car.VIN"></InputText>
            <div class="input-group-append">
                <button type="button" class="btn btn-secondary" @onclick="async () => await DecodeVin()">Verify</button>
            </div>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-3">
            <label>Year</label>
            <InputNumber class="form-control" @bind-Value="Upload.Car.Year"></InputNumber>
        </div>
        <div class="form-group col-md-3">
            <label>Make</label>
            <InputText class="form-control" @bind-Value="Upload.Car.Make"></InputText>
        </div>
        <div class="form-group col-md-3">
            <label>Model</label>
            <InputText class="form-control" @bind-Value="Upload.Car.Model"></InputText>
        </div>
        <div class="form-group col-md-3">
            <label>Color</label>
            <InputText class="form-control" @bind-Value="Upload.Car.Color"></InputText>
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col-md-3">
            <label>Mileage</label>
            <InputNumber class="form-control" placeholder="Exempt" @bind-Value="Upload.Car.Mileage"></InputNumber>
        </div>
        <div class="form-group col-md-3">
            <label>Bought Price</label>
            <InputNumber class="form-control" @bind-Value="Upload.Car.BoughtPrice"></InputNumber>
        </div>
        <div class="form-group col-md-3">
            <label>List Price</label>
            <InputNumber class="form-control" @bind-Value="Upload.Car.ListPrice"></InputNumber>
        </div>
        <div class="form-group col-md-3 my-auto text-center">
            <div class="form-check">
                <InputCheckbox class="form-check-input" id="salvageCheck" @bind-Value="Upload.Car.IsSalvage"></InputCheckbox>
                <label class="form-check-label" for="salvageCheck">Is Salvage</label>
            </div>
        </div>
    </div>
    @if (Upload.Files != null)
    {
        int i = 0;
        <ul class="list-inline">
            @foreach (string file in Upload.Files)
            {
                <li class="list-inline-item">
                    <div class="figure">
                        <img src="@file" class="figure-img" width="100" height="100" />
                        <figcaption class="figure-caption text-right">
                            <InputRadio class="form-check-input" SelectedValue="@i" @bind-Value="Upload.ThumbanilIndex" id=@($"thumbnail{i}") />
                            <label class="form-check-label" for=@($"thumbnail{i}")>thumbnail</label>
                        </figcaption>
                    </div>
                </li>
                i++;
            }
        </ul>
    }
    <div class="form-group">
        <ImagePicker @bind-Files="Upload.Files" />
    </div>
    <div class="text-right">
        <button type="submit" class="btn btn-secondary">Submit</button>
    </div>
</EditForm>

@code {
    private CarUpload Upload { get; set; } = new CarUpload();
    private string DecodedVin { get; set; }
    private List<string> Errors { get; set; } = new List<string>();

    private async Task SubmitVehicle()
    {
        await DecodeVin(false);
        var response = await auth.Client.PostAsJsonAsync<CarUpload>("/app/inventory/add", Upload);
        if (response.IsSuccessStatusCode)
        {
            nav.NavigateTo($"/warranty/{Upload.Car.Year}/{Upload.Car.Make}/{Upload.Car.Model}/{Upload.Car.VIN}");
        }
        else
            await js.InvokeVoidAsync("blazorAlert", response.ReasonPhrase);
    }

    private async Task DecodeVin(bool showMessage = true)
    {
        if (DecodedVin == Upload.Car.VIN)
        {
            if (showMessage)
                await js.InvokeVoidAsync("blazorAlert", "The VIN has already been decoded.");
        }
        else
        {
            var response = await http.GetAsync($"https://vpic.nhtsa.dot.gov/api/vehicles/DecodeVin/{Upload.Car.VIN}?format=json");
            if (response.IsSuccessStatusCode)
            {
                DecodedVin = Upload.Car.VIN;
                Upload.Car.JsonData = await response.Content.ReadAsStringAsync();
                Upload.Car.DeserializeJson();
                string message = Upload.Car.Data.Results.Find(x => x.VariableId == 191).Value;
                if (showMessage)
                    await js.InvokeVoidAsync("blazorAlert", message);
                Errors.Clear();
                if (Upload.Car.Data.Results.Find(x => x.VariableId == 143).Value != "0")
                    Errors.Add(message);
                else
                    SetVariables();
            }
        }
    }

    private void SetVariables()
    {
        Upload.Car.Year = int.Parse(Upload.Car.Data.Results.Find(x => x.VariableId == 29).Value);
        Upload.Car.Make = Upload.Car.Data.Results.Find(x => x.VariableId == 26).Value;
        Upload.Car.Model = Upload.Car.Data.Results.Find(x => x.VariableId == 28).Value;
    }
}
